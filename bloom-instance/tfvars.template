project_name = "Doorway" # TBD
application_name = "Bloom Housing Instance"
name_prefix = "doorway"
team_name = "doorway"
aws_region = "us-west-1"
sdlc_stage = "dev"

network = {
  vpc_cidr = "10.0.0.0/16"

  subnet_groups = {
    "public" = {
      name      = "Public"
      is_public = true
      subnets = [
        {
          az   = "us-west-1a",
          cidr = "10.0.0.0/24"
        },
        {
          az   = "us-west-1c",
          cidr = "10.0.1.0/24"
        }
      ]
    }

    "app" = {
      name    = "App"
      use_ngw = true
      subnets = [
        {
          az   = "us-west-1a",
          cidr = "10.0.2.0/24"
        },
        {
          az   = "us-west-1c",
          cidr = "10.0.3.0/24"
        }
      ]
    }

    "data" = {
      name = "Data"
      subnets = [
        {
          az   = "us-west-1a",
          cidr = "10.0.4.0/24"
        },
        {
          az   = "us-west-1c",
          cidr = "10.0.5.0/24"
        }
      ]
    }
  }
}

dns = {
  default_ttl = 60

  zones = {
    "doorway.test" = {
      id = "<zone-id>"

      additional_records = [
        {
          name = "txt.doorway.test"
          type = "TXT"
          values = ["some-text-value"]
        }
      ]
    }
  }
}

database = {
  db_name = "bloom"
  type    = "rds" # rds, aurora-serverless
  subnet_group             = "data"
  engine_version           = "13.8"
  instance_class           = "db.t3.micro" # Only needed if rds
  port                     = 5432
  prevent_deletion         = false
  apply_change_immediately = false
  username                 = "doorway"
  #password = "doorway-password"

  maintenance_window = "Sat:23:00-Sun:04:00"

  storage = {
    min     = 20
    max     = 50
  }

  backups = {
    retention = 30
    window    = "00:00-01:00"
  }

  # Only required if aurora-serverless
  serverless_capacity = {
    min = 0.5
    max = 3.0
  }
}

certs = {
  "doorway" = {
    domain = "doorway.test"
    alt_names = [
      # Wildcards are supported
      "*.doorway.test"
    ]
  },
  "doorway-external" = {
    # Certs can be created for unmanaged/external domains
    domain = "doorway.external"

    # Just set auto_validate to false to prevent DNS record creation
    auto_validate = false

    alt_names = [
      "public.doorway.external",
      "partners.doorway.external",
      "api.doorway.external"
    ]
  }
}

albs = {
  "public" = {
    subnet_group = "public"

    listeners = {
      http = {
        port           = 80
        default_action = "force-tls"
        allowed_ips    = ["0.0.0.0/0"]
      }

      https = {
        port        = 443
        default_action = "404"
        allowed_ips = ["0.0.0.0/0"]

        tls = {
          default_cert     = "doorway"
          additional_certs = ["doorway-external"]
        }
      }

      backend = {
        port            = 3100
        allowed_subnets = ["app"]
      }
    }
  }
}

public_sites = [
  {
    name = "public"
    port = 3000

    task = {
      cpu   = 256
      ram   = 512
      image = "<repo>/public:run"

      env_vars = {
        LISTINGS_QUERY   = "/listings"
        LANGUAGES        = "en,es,zh,vi,tl"
        IDLE_TIMEOUT     = 5
        CACHE_REVALIDATE = 60
      }
    }

    service = {
      subnet_group = "app"

      albs = {
        "public" = {
          listeners = {
            "https" = {
              domains = [ "doorway.test" ]
            }
          }
        }
      }

      health_check = {
        interval     = 10
        valid_status = ["200", "202"]
        path         = "/"
        protocol     = "HTTP"
        timeout      = 5
      }
    }
  }
]

partner_site = {
  name = "partner"
  port = 3001

  task = {
    cpu   = 256
    ram   = 512
    image = "<repo>/partners:run"

    env_vars = {
      LISTINGS_QUERY  = "/listings"
      SHOW_DUPLICATES = "false"
      SHOW_LM_LINKS   = "true"
    }
  }

  service = {
    subnet_group = "app"

    albs = {
      "public" = {
        listeners = {
          "https" = {
            domains = [ "partner.doorway.test" ]
          }
        }
      }
    }

    health_check = {}
  }
}

backend_api = {
  name = "backend"
  port = 3100

  task = {
    cpu   = 256
    ram   = 512
    image = "<repo>/backend:run"

    env_vars = {
      LISTINGS_QUERY  = "/listings"
      SHOW_DUPLICATES = "false"
      SHOW_LM_LINKS   = "true"
    }
  }

  migration = {
    cpu   = 256
    ram   = 1024
    image = "<repo>/backend:migrate"
  }

  service = {
    subnet_group = "app"

    albs = {
      "public" = {
        listeners = {
          "https" = {
            domains = [
              "backend.doorway.test"
            ]
          }
        }
      }
    }

    health_check = {
      interval     = 30
      valid_status = ["200", "202"]
      path         = "/jurisdictions"
      protocol     = "HTTP"
      timeout      = 5
    }
  }
}
