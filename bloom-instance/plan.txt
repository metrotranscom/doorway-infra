aws_s3_bucket.logging_bucket: Refreshing state... [id=doorway-logging20230321183223840900000002]
module.certs["chriscasto.doorway.housingbayarea.org"].aws_acm_certificate.cert: Refreshing state... [id=arn:aws:acm:us-west-1:364076391763:certificate/1c06186c-3f55-4ce4-995b-b071aa4d8a1e]
module.certs["chriscasto.test.doorway.housingbayarea.org"].aws_acm_certificate.cert: Refreshing state... [id=arn:aws:acm:us-west-1:364076391763:certificate/76af482b-daaa-4627-826d-fe3e209fd12f]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.albs["public"].aws_lb.alb will be created
  + resource "aws_lb" "alb" {
      + arn                        = (known after apply)
      + arn_suffix                 = (known after apply)
      + desync_mitigation_mode     = "defensive"
      + dns_name                   = (known after apply)
      + drop_invalid_header_fields = false
      + enable_deletion_protection = false
      + enable_http2               = true
      + enable_waf_fail_open       = false
      + id                         = (known after apply)
      + idle_timeout               = 60
      + internal                   = (known after apply)
      + ip_address_type            = (known after apply)
      + load_balancer_type         = "application"
      + name                       = "doorway-chriscasto-public"
      + preserve_host_header       = false
      + security_groups            = (known after apply)
      + subnets                    = (known after apply)
      + tags_all                   = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + vpc_id                     = (known after apply)
      + zone_id                    = (known after apply)

      + access_logs {
          + bucket  = "doorway-logging20230321183223840900000002"
          + enabled = true
          + prefix  = "doorway-chriscasto/alb/public"
        }

      + subnet_mapping {
          + allocation_id        = (known after apply)
          + ipv6_address         = (known after apply)
          + outpost_id           = (known after apply)
          + private_ipv4_address = (known after apply)
          + subnet_id            = (known after apply)
        }
    }

  # module.albs["public"].aws_security_group.alb will be created
  + resource "aws_security_group" "alb" {
      + arn                    = (known after apply)
      + description            = "Enable access to public ALB"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "doorway-chriscasto-alb-public"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + vpc_id                 = (known after apply)
    }

  # module.albs["public"].aws_vpc_security_group_egress_rule.https will be created
  + resource "aws_vpc_security_group_egress_rule" "https" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + from_port              = 1
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + to_port                = 65535
    }

  # module.certs["doorway"].aws_acm_certificate.cert will be created
  + resource "aws_acm_certificate" "cert" {
      + arn                       = (known after apply)
      + domain_name               = "chriscasto.doorway.housingbayarea.org"
      + domain_validation_options = [
          + {
              + domain_name           = "*.chriscasto.doorway.housingbayarea.org"
              + resource_record_name  = (known after apply)
              + resource_record_type  = (known after apply)
              + resource_record_value = (known after apply)
            },
          + {
              + domain_name           = "chriscasto.doorway.housingbayarea.org"
              + resource_record_name  = (known after apply)
              + resource_record_type  = (known after apply)
              + resource_record_value = (known after apply)
            },
        ]
      + id                        = (known after apply)
      + key_algorithm             = (known after apply)
      + not_after                 = (known after apply)
      + not_before                = (known after apply)
      + pending_renewal           = (known after apply)
      + renewal_eligibility       = (known after apply)
      + renewal_summary           = (known after apply)
      + status                    = (known after apply)
      + subject_alternative_names = [
          + "*.chriscasto.doorway.housingbayarea.org",
          + "chriscasto.doorway.housingbayarea.org",
        ]
      + tags_all                  = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + type                      = (known after apply)
      + validation_emails         = (known after apply)
      + validation_method         = "DNS"
    }

  # module.certs["doorway"].aws_acm_certificate_validation.cert[0] will be created
  + resource "aws_acm_certificate_validation" "cert" {
      + certificate_arn         = (known after apply)
      + id                      = (known after apply)
      + validation_record_fqdns = (known after apply)
    }

  # module.certs["doorway"].aws_route53_record.cert["*.chriscasto.doorway.housingbayarea.org"] will be created
  + resource "aws_route53_record" "cert" {
      + allow_overwrite = true
      + fqdn            = (known after apply)
      + id              = (known after apply)
      + name            = (known after apply)
      + records         = (known after apply)
      + ttl             = 60
      + type            = (known after apply)
      + zone_id         = (known after apply)
    }

  # module.certs["doorway"].aws_route53_record.cert["chriscasto.doorway.housingbayarea.org"] will be created
  + resource "aws_route53_record" "cert" {
      + allow_overwrite = true
      + fqdn            = (known after apply)
      + id              = (known after apply)
      + name            = (known after apply)
      + records         = (known after apply)
      + ttl             = 60
      + type            = (known after apply)
      + zone_id         = (known after apply)
    }

  # module.certs["doorway-test"].aws_acm_certificate.cert will be created
  + resource "aws_acm_certificate" "cert" {
      + arn                       = (known after apply)
      + domain_name               = "chriscasto.test.doorway.housingbayarea.org"
      + domain_validation_options = [
          + {
              + domain_name           = "chriscasto.test.doorway.housingbayarea.org"
              + resource_record_name  = (known after apply)
              + resource_record_type  = (known after apply)
              + resource_record_value = (known after apply)
            },
          + {
              + domain_name           = "partners.chriscasto.test.doorway.housingbayarea.org"
              + resource_record_name  = (known after apply)
              + resource_record_type  = (known after apply)
              + resource_record_value = (known after apply)
            },
          + {
              + domain_name           = "public.chriscasto.test.doorway.housingbayarea.org"
              + resource_record_name  = (known after apply)
              + resource_record_type  = (known after apply)
              + resource_record_value = (known after apply)
            },
        ]
      + id                        = (known after apply)
      + key_algorithm             = (known after apply)
      + not_after                 = (known after apply)
      + not_before                = (known after apply)
      + pending_renewal           = (known after apply)
      + renewal_eligibility       = (known after apply)
      + renewal_summary           = (known after apply)
      + status                    = (known after apply)
      + subject_alternative_names = [
          + "chriscasto.test.doorway.housingbayarea.org",
          + "partners.chriscasto.test.doorway.housingbayarea.org",
          + "public.chriscasto.test.doorway.housingbayarea.org",
        ]
      + tags_all                  = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + type                      = (known after apply)
      + validation_emails         = (known after apply)
      + validation_method         = "DNS"
    }

  # module.network.aws_vpc.vpc will be created
  + resource "aws_vpc" "vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "doorway-chriscasto:default"
        }
      + tags_all                             = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Name"        = "doorway-chriscasto:default"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
    }

  # module.albs["public"].module.listeners["backend"].aws_lb_listener.listener will be created
  + resource "aws_lb_listener" "listener" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 3100
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }

      + default_action {
          + order = (known after apply)
          + type  = "fixed-response"

          + fixed_response {
              + content_type = "text/plain"
              + status_code  = "404"
            }
        }
    }

  # module.albs["public"].module.listeners["backend"].aws_vpc_security_group_ingress_rule.ingress["10.0.2.0/24"] will be created
  + resource "aws_vpc_security_group_ingress_rule" "ingress" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "10.0.2.0/24"
      + from_port              = 3100
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + to_port                = 3100
    }

  # module.albs["public"].module.listeners["backend"].aws_vpc_security_group_ingress_rule.ingress["10.0.3.0/24"] will be created
  + resource "aws_vpc_security_group_ingress_rule" "ingress" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "10.0.3.0/24"
      + from_port              = 3100
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + to_port                = 3100
    }

  # module.albs["public"].module.listeners["http"].aws_lb_listener.listener will be created
  + resource "aws_lb_listener" "listener" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }

      + default_action {
          + order = (known after apply)
          + type  = "redirect"

          + redirect {
              + host        = "#{host}"
              + path        = "/#{path}"
              + port        = "443"
              + protocol    = "HTTPS"
              + query       = "#{query}"
              + status_code = "HTTP_302"
            }
        }
    }

  # module.albs["public"].module.listeners["http"].aws_vpc_security_group_ingress_rule.ingress["0.0.0.0/0"] will be created
  + resource "aws_vpc_security_group_ingress_rule" "ingress" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + from_port              = 80
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + to_port                = 80
    }

  # module.albs["public"].module.listeners["https"].aws_lb_listener.listener will be created
  + resource "aws_lb_listener" "listener" {
      + arn               = (known after apply)
      + certificate_arn   = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 443
      + protocol          = "HTTPS"
      + ssl_policy        = (known after apply)
      + tags_all          = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }

      + default_action {
          + order = (known after apply)
          + type  = "fixed-response"

          + fixed_response {
              + content_type = "text/plain"
              + status_code  = "404"
            }
        }
    }

  # module.albs["public"].module.listeners["https"].aws_lb_listener_certificate.listener["doorway-test"] will be created
  + resource "aws_lb_listener_certificate" "listener" {
      + certificate_arn = (known after apply)
      + id              = (known after apply)
      + listener_arn    = (known after apply)
    }

  # module.albs["public"].module.listeners["https"].aws_vpc_security_group_ingress_rule.ingress["0.0.0.0/0"] will be created
  + resource "aws_vpc_security_group_ingress_rule" "ingress" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "0.0.0.0/0"
      + from_port              = 443
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + to_port                = 443
    }

  # module.network.module.app.aws_subnet.subnets["0"] will be created
  + resource "aws_subnet" "subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "doorway-chriscasto:App 0"
        }
      + tags_all                                       = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Name"        = "doorway-chriscasto:App 0"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.network.module.app.aws_subnet.subnets["1"] will be created
  + resource "aws_subnet" "subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "doorway-chriscasto:App 1"
        }
      + tags_all                                       = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Name"        = "doorway-chriscasto:App 1"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.network.module.data.aws_subnet.subnets["0"] will be created
  + resource "aws_subnet" "subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "doorway-chriscasto:Data 0"
        }
      + tags_all                                       = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Name"        = "doorway-chriscasto:Data 0"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.network.module.public.aws_subnet.subnets["0"] will be created
  + resource "aws_subnet" "subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.0.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "doorway-chriscasto:Public 0"
        }
      + tags_all                                       = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Name"        = "doorway-chriscasto:Public 0"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.network.module.public.aws_subnet.subnets["1"] will be created
  + resource "aws_subnet" "subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "doorway-chriscasto:Public 1"
        }
      + tags_all                                       = {
          + "Application" = "Bloom Housing Instance"
          + "Environment" = "dev"
          + "Name"        = "doorway-chriscasto:Public 1"
          + "Project"     = "Doorway"
          + "Team"        = "doorway"
          + "Workspace"   = "chriscasto"
        }
      + vpc_id                                         = (known after apply)
    }

Plan: 22 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + cert_validation_records_not_created = {
      + doorway      = (known after apply)
      + doorway-test = (known after apply)
    }

Warning: Value for undeclared variable

The root module does not declare a variable named "database" but a value was found in file "chriscasto.tfvars". If you meant to use this value, add a "variable" block to the configuration.

To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all configurations in your organization. To reduce the verbosity of these warnings, use the -compact-warnings option.

Warning: Resource targeting is in effect

You are creating a plan with the -target option, which means that the result of this plan may not represent all of the changes requested by the current configuration.

The -target option is not for routine use, and is provided only for exceptional situations such as recovering from errors or mistakes, or when Terraform specifically suggests to use it as part of an error message.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
