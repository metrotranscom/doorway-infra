project_name     = "Doorway Housing Project"
project_id       = "doorway"
application_name = "Bloom Housing Pipeline"
owner            = "infra-team@example.com"
aws_region       = "us-west-1"

# The name of the CodeStar Connection to use for reading GitHub repos
gh_codestar_conn_name = "doorway-github-connection"

ecr = {
  # This should be the region where the ECR repos exist
  default_region = "us-west-1"
  # And this should be the account where they exist
  default_account = "123456789012"

  repo_groups = {
    # The key for each repo group is used to resolve the name of a specific repo
    # With the definition below, using "dev:partners" will point to a repo with a URI like:
    # 123456789012.dkr.ecr.us-west-1.amazonaws.com/doorway-dev/partners

    "dev" = {
      namespace = "doorway-dev"
      repos = [
        "public",
        "partners",
        "backend",
        "import-listings"
      ]
    }
  }
}

pipeline = {
  # This helps identify the pipeline
  # It shouldn't need to be changed, but it can be
  name = "bloom-app"

  # The sources to use as a starting point for the pipeline
  sources = {
    "code" : {
      # The display name for this source
      name : "DoorwayBloomSource"

      # Whether this source is the primary source
      # There must be exactly 1 primary source
      is_primary : true

      # The repo where the source files are located
      repo : {
        # The name of this repo in GitHub
        name = "metrotranscom/doorway"

        # The branch to respond to changes to
        branch = "main"
      }
    }
  }

  # Define named groups for sending notifications
  notification_topics = {
    "devs" : {
      emails : ["dev-team@example.com"]
    }
    "approvers" : {
      emails : ["approvers@example.com"]
    }
  }

  # Notify named group(s) above when there are state changes to the pipeline or
  # pipeline resources like stages or actions
  notify = [

    # "Notify group 'devs' when pipeline state changes to 'failed'
    {
      topic : "devs"
      on : {
        pipeline : ["failed"]

        # We normally only care if the pipeline failed, but some groups may be
        # interested in other statuses and/or components
        #pipeline : ["failed", "started", "succeeded", "canceled"]
        #approval: ["failed", "succeeded", "needed"]
        #stage : ["failed"]
        #action : ["failed"]
      }
    }
  ]

  # These vars are applied to all build actions in all stages in this pipeline
  build_env_vars = {
    # All build stages are looking for these vars so they can know where to push
    # new images. These values should match the account ID and region in the ecr
    # section above.
    ECR_ACCOUNT_ID : "123456789012"
    ECR_REGION : "us-west-1"
  }

  stages = [
    # Build dev Docker images
    {
      # Terraform automatically sorts lists/maps by alphabetical order
      # Prefix with a number to ensure proper ordering
      name  = "0-dev-build"
      label = "Dev.Build"

      # These vars are applied to all build actions in this stage
      build_env_vars = {
        ECR_NAMESPACE : "doorway-dev"
      }

      # The actions to perform in this stage
      actions = [
        {
          # Internal resource name
          name = "public"

          # Display name in pipeline
          label = "BuildPublic"

          # The type of action. Only "build" and "approve" are supported
          type = "build"

          # The order to run this action in.  Set to the same value to run concurrently
          order = 1

          # Whether to run in privileged mode.  Necessary for building Docker images
          privileged = true

          # How long to let the build job run before giving up
          timeout = 60

          # The path to the buildspec file to use in the primary source
          buildspec = "ci/buildspec/build_public.yml"

          # Grant access to named ECR repos defined above in ecr.repo_groups
          ecr_repo_access = {
            # "Permit pushing images to <account>.dkr.ecr.<region>.amazonaws.com/<namespace>/public"
            "dev:public" : ["push"]
          }

          # Environmental variables to pass to this build project
          env_vars = {
            CLOUDINARY_CLOUD_NAME : "exygy"
          }
        },
        {
          name       = "partners"
          label      = "BuildPartners"
          type       = "build"
          order      = 1
          privileged = true
          timeout    = 60

          buildspec = "ci/buildspec/build_partners.yml"

          ecr_repo_access = {
            "dev:partner" : ["push"]
          }

          env_vars = {
            CLOUDINARY_CLOUD_NAME : "exygy"
          }
        },
        {
          name       = "backend"
          label      = "BuildBackend"
          type       = "build"
          order      = 1
          privileged = true

          buildspec = "ci/buildspec/build_backend.yml"

          ecr_repo_access = {
            "dev:backend" : ["push"]
          }
        },
        {
          name       = "import-listings"
          label      = "BuildImportListings"
          type       = "build"
          order      = 1
          privileged = true

          ecr_repo_access = {
            "dev:import-listings" : ["push"]
          }

          buildspec = "ci/buildspec/build_import_listings.yml"
        },
      ]
    },

    # Deploy app into dev environment
    {
      name  = "1-dev-deploy"
      label = "Dev.Deploy"

      # These vars are applied to all build actions in this stage
      build_env_vars = {
        # Used by all build steps in this stage
        ECR_NAMESPACE       = "doorway-dev"
        ECS_DEFAULT_CLUSTER = "doorway-dev-default"
      }

      # These network settings are applied to any build action with `vpc.use = true`
      # unless other values are provided at the action level
      default_network = {
        vpc_id = "vpc-08b353eee422a1d1b"
        # "App" subnets
        subnets         = ["subnet-08e79084ddb4f1ab8", "subnet-059055b7efcdcf7d7"]
        security_groups = ["sg-0e2851e14f826e8af"]
      }

      actions = [
        # Require approval before permitting deployment in this environment
        {
          name  = "approve-deploy"
          label = "ApproveDeployment"
          type  = "approval"
          order = 1

          # The emails in the "approvers" notification group above will be sent
          # a notification asking them to approve or reject.  These individuals
          # must still have permission to do so.
          topic = "approvers"
        },

        # Reseed the database
        # Could also be used to just run migrations
        {
          name       = "reseed"
          label      = "Migration.Reseed"
          type       = "build"
          privileged = true
          # Run this after approval
          order = 2

          # The migration step needs to run in the VPC to be able to access the database
          vpc = { use : true }

          # Need to be able to pull the migration image from the ECR repo
          ecr_repo_access = {
            "dev:backend" : ["pull"]
          }

          buildspec = "ci/buildspec/migrate_stop_backend.yml"

          # Pass in extra policies containing necessary permissions
          policy_arns = [
            "arn:aws:iam::123456789012:policy/doorway-migration-auth-to-repo"
          ]

          env_vars = {
            ECS_BACKEND_SERVICE = "doorway-dev-srv-backend"
          }

          # This action uses secrets
          # Pass in an ARN to the secret to use and the name of the env var that will contain it
          secret_arns = {
            DB_CREDS_ARN : "arn:aws:secretsmanager:us-west-1:123456789012:secret:doorway-dev/db/20230420230531086300000123-abcdef"
          }
        },

        # Promote images with commit-specific tags to the approved version for running in this environment
        {
          name  = "promote-images"
          label = "PromoteImages"
          type  = "build"
          # Only run this if the previous step succeeds
          order = 3

          # Need the ability to retag images in all repos in this environment
          ecr_repo_access = {
            "dev:public" : ["retag"]
            "dev:partners" : ["retag"]
            "dev:backend" : ["retag"]
            "dev:import-listings" : ["retag"]
          }

          buildspec = "ci/buildspec/promote_images.yml"
        },

        # Trigger a redeployment of ECS services so they use the new images
        {
          name  = "update-ecs"
          label = "Update-ECS"
          type  = "build"
          # Only run this if the previous step succeeds
          order = 4

          buildspec = "ci/buildspec/update_ecs.yml"

          policy_arns = [
            "arn:aws:iam::123456789012:policy/doorway-update-ecs-all"
          ]

          env_vars = {
            ECS_BACKEND_SERVICE = "doorway-dev-srv-backend"
            ECS_PUBLIC_SERVICE  = "doorway-dev-srv-public"
            ECS_PARTNER_SERVICE = "doorway-dev-srv-partner"
          }
        },
      ]
    },
  ]
}
