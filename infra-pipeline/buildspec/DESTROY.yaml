# WARNING!!!!! WARNING!!! WARNING!!!
# The purpose of this buildspec is to DESTROY a doorway environment. 
# This should only be used in ad-hoc dev environments or in the case of extreme emergency. 
# YOU HAVE BEEN WARNED!
# WARNING!!!!! WARNING!!! WARNING!!!

version: 0.2
env:
  shell: bash
  variables:
    # This var is used to define which version of terraform to use
    # This can be overridden by passing a TF_VERSION var to the build
    TF_VERSION: "1.3.7"
    # This var tells terraform that we're running in a CI/CD pipeline
    TF_IN_AUTOMATION: "true"
    # This var tells terraform to disable prompts for missing variables
    TF_INPUT: "false"
phases:
  install:
    commands:
      # Install terraform in /usr/bin
      - cd /usr/bin
      - curl -s -qL -o terraform.zip "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip"
      - unzip -o terraform.zip

  build:
    commands:
       # Verify the values of vars passed in via the project
      - echo "${TF_WORKSPACE}"
      - echo "${TF_ROOT_SOURCE_VAR_NAME}"
      - echo "${TF_ROOT_PATH}"
      - echo "${TFVARS_SOURCE_VAR_NAME}"
      - echo "${TFVARS_PATH}"

      # Set the root dir for running terraform commands
      - TF_ROOT="${!TF_ROOT_SOURCE_VAR_NAME}"
      - echo "${TF_ROOT}"
      - TF_ROOT_FULL_PATH="${TF_ROOT}/${TF_ROOT_PATH}"
      - echo "${TF_ROOT_FULL_PATH}"
      # Change to that directory
      - cd "${TF_ROOT_FULL_PATH}"

      # Set the path to the tfvars file
      - TFVARS_ROOT="${!TFVARS_SOURCE_VAR_NAME}"
      - echo "${TFVARS_ROOT}"
      - TFVARS_FULL_PATH="${TFVARS_ROOT}/${TFVARS_PATH}"
      - echo "${TFVARS_FULL_PATH}"

      # Verify which workspace is being used
      - terraform workspace show
      # Always have to `terraform init` since new modules may be installed
      # State may have moved, so also call with -migrate-state
      - terraform init -migrate-state
      - terraform apply -destroy  -auto-approve -var-file "${TFVARS_FULL_PATH}" "${TF_PLAN_FULL_PATH}" -no-color

